buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' } // Add this line
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'


repositories {
    flatDir {
        dirs("libs")
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
}

def build_snapshot = System.getenv("BUILD_SNAPSHOT") == "true"
def build_id = System.getenv("BUILD_ID")

version = '0.8.0'

if (build_snapshot) {
    version += '-SNAPSHOT'
}
if (build_id != null) {
    version += "+build.${build_id}"
}

group = 'com.github.quinnfrost' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'dragontongue'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // https://forums.minecraftforge.net/topic/82228-1152-3110-intellij-and-gradlew-forge-hotswap-and-dcevm-tutorial/
            if (project.hasProperty('hotswapAgent') && project.findProperty('enableHotswap').toBoolean()) {
                jvmArgs '-ea', '-Xms1G', '-Xmx4G', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5010', '-XXaltjvm=dcevm', '-XX:+UnlockExperimentalVMOptions', "-javaagent:${hotswapAgent}"
            } else {
                jvmArgs '-ea', '-Xms1G', '-Xmx4G'
            }

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                dragontongue {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                dragontongue {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.markers', 'REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dragontongue', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dragontongue {
                    source sourceSets.main
                }
            }
        }
    }
}

apply plugin: 'org.spongepowered.mixin'
mixin {
    add sourceSets.main, "dragontongue.refmap.json"
    config 'dragontongue.mixins.json'

    debug = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

    // Apply Mixin AP
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    implementation "curse.maven:citadel-331936:3783098"

//    implementation fg.deobf("curse.maven:iceandfire-264231:3948661")
//    compileOnly "curse.maven:citadel-331936:3441030"
//    runtimeOnly files("..\\Ice_and_Fire\\build\\libs\\iceandfire-2.1.12-1.16.5.jar")
    compileOnly project(":Ice_and_Fire")
    runtimeOnly fg.deobf("file:Ice_and_Fire:2.1.12-1.18.2")

    runtimeOnly fg.deobf("curse.maven:customvillagertrades-463402:3722281")
    runtimeOnly fg.deobf("curse.maven:Architectury-419699:4476082")

//    compileOnly fg.deobf("curse.maven:iceandfire-264231:3948661")

//    compileOnly project(":Ice_and_Fire-1.16.3")
//    runtimeOnly fg.deobf("curse.maven:iceandfire-264231:3948661")

//    runtimeOnly project(":Ice_and_Fire-1.16.3")

//    implementation fg.deobf(files('libs/Ice_and_Fire-2.1.12-1.16.5.jar'))

//    implementation fg.deobf(project(":Ice_and_Fire-1.16.3"))

//    implementation fg.deobf("curse.maven:guifollowers_1.16.5-1.9-410911:3693575")
//    implementation fg.deobf("curse.maven:collective-1.16.5-5.49-342584:4312565")

//    implementation fg.deobf("curse.maven:TrajectoryPreview-289141:3635426")

//    compileOnly fg.deobf("curse.maven:Ping-1.16.4-1.6.9-222967:3172028")
//    implementation fg.deobf("curse.maven:Ping-1.16.4-1.6.9-222967:3172028")

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Dragon Tongue",
                "Specification-Vendor"    : "quinnfrost",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "quinnfrost",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "dragontongue.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
    copy {
        from "mcmodsrepo/com/github/quinnfrost/dragontongue/${version}/${project.name}-${version}.jar"
        into "${projectDir}"
    }
}
